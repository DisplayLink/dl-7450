image: python:3.12

build:
  stage: build
  before_script:
    - python --version ; pip --version  # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
  script:
    - pip install sphinx sphinx-rtd-theme
    - sphinx-build docs build
  rules:
    - if: $CI_COMMIT_BRANCH !~ /documentation.*/ # Don't build on documentation branches.

prepare_release:
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'  # Ensure ssh-agent is installed and running
    - eval $(ssh-agent -s)
    - ssh-add -L || true
    - chmod 400 "$GITLAB_DEPLOY_KEY"  # Add ssh deploy keys
    - chmod 400 "$GITHUB_DEPLOY_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo 'echo $GITLAB_DEPLOY_PASSPHRASE' > ~/.ssh/gitlab_passphrase && chmod 700 ~/.ssh/gitlab_passphrase
    - echo 'echo $GITHUB_DEPLOY_PASSPHRASE' > ~/.ssh/github_passphrase && chmod 700 ~/.ssh/github_passphrase
    - DISPLAY=None SSH_ASKPASS=~/.ssh/gitlab_passphrase ssh-add "$GITLAB_DEPLOY_KEY"
    - DISPLAY=None SSH_ASKPASS=~/.ssh/github_passphrase ssh-add "$GITHUB_DEPLOY_KEY"
    - ssh-add -L
    - rm ~/.ssh/*passphrase
    - touch ~/.ssh/known_hosts  # Add known ssh hosts
    - echo "$GITLAB_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - echo "$GITHUB_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - git version  # Set up git credentials
    - git config --global user.email "$GIT_EMAIL"
    - git config --global user.name "$GIT_USERNAME"
  script:
    - git status
    - 'git for-each-ref --count=2 --sort=-creatordate --format "%(refname)" refs/tags/[0-9]*\.[0-9]*\.[0-9]* | sed "s=refs/tags/=="'
    - '{ IFS= read -r new_version && IFS= read -r old_version; } < <(git for-each-ref --count=2 --sort=-creatordate --format "%(refname)" refs/tags/[0-9]*\.[0-9]*\.[0-9]* | sed "s=refs/tags/==")'
    - 'echo "New version: $new_version"'
    - 'echo "Old version: $old_version"'
    - git remote add gitlab "$GITLAB_URL"
    - git remote add github "$GITHUB_URL"
    - git fetch --all
    - git reset --soft github/main
    - git commit -m "Release for version $new_version"
    - git push --verbose --push-option ci.skip gitlab "HEAD:refs/heads/documentation/release/$new_version"  # Skip ci to avoid potential infinite recursion loop on ci builds
    - git push --verbose github "HEAD:refs/heads/documentation/release/$new_version"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/'  # Bit OTT but semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string

